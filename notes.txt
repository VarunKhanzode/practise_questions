

# Check status of changes
git status

# Stage all changed, new, and deleted files
git add .

# Commit the staged changes with a message
git commit -m "Your commit message here"

# Push to the main branch
git push origin main

# GIL
What is it? - A lock that allows only one thread to run Python code at a time
Why exists? - To protect memory (reference counting) from thread issues
When is it okay? - I/O-bound work (network, file, DB)
When is it bad? - CPU-bound tasks (math, loops)
Alternatives - multiprocessing, NumPy, C extensions


Gil is a mechanism in python which ensures that only one thread can execute python bytecode at a time. It exists to simplify memory management particularly python's reference counting system.
This means that multi threading does not provide true parallelism for CPU bound tasks. Only one thread runs at a time so multi threaded performance gains are limited for heavy computations.

"What is Python’s reference counting system?"
> Python uses reference counting as one of its memory management techniques.
Every object in Python has an internal counter that keeps track of how many references (or variables) are currently pointing to that object.

When a new reference is made, the count increases. When a reference is deleted or goes out of scope, the count decreases.

When the reference count drops to zero, it means the object is no longer being used, and Python automatically frees the memory (i.e., garbage collects the object).

Why is this important for the GIL?

> Because reference counting isn’t thread-safe by default.
If two threads try to update the reference count at the same time, it could lead to memory errors or crashes.

That’s one of the main reasons Python’s GIL exists — it ensures only one thread can modify reference counts at a time.

Python uses automatic memory management. Every object in Python has a reference count — it tracks how many variables point to 
that object. When the reference count drops to zero, the object is deleted.

However, sometimes two objects reference each other — that’s called a circular reference. 
In that case, Python uses a built-in garbage collector to detect and clean them up.

So in short: Python first uses reference counting, and when that's not enough, it uses a garbage collector to handle leftovers."


[Client] ---> [Nginx] ---> [Gunicorn/Uvicorn] ---> [Flask/FastAPI App]

Gunicorn is a WSGI server used to run Flask/Django apps in production.
Uvicorn is an ASGI server designed for FastAPI or any async framework.
Nginx is a reverse proxy that routes traffic to these servers, handles SSL, and serves static files.

SSL is a security protocol used to encrypt the data transmitted between a client (like a browser) and 
a server (like a website) to ensure privacy, integrity, and security.

FastAPI acts as a higher-level API framework built on Starlette. While Starlette provides the ASGI foundation — 
like routing, middleware, and request/response handling — FastAPI adds automatic validation with Pydantic, automatic OpenAPI documentation, 
a dependency injection system, and strong typing using Python type hints. This allows developers to build 
production-ready APIs much faster and with fewer bugs.

def decorator(func):
    def wrapper(*args, **kwargs):
        stime = time.time()
        result = func(*args, **kwargs)
        etime = time.time()
        print(f"{func.__name__} took {etime-stime:.4f} seconds")
        return result
    return wrapper

@decorator
def generate(n):
    for i in range(n):
        time.sleep(1)
        print(i)

generate(3)
output -
0
1
2
generate took 3.0006 seconds

